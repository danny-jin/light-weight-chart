{"version":3,"sources":["bitquery.js","index.js"],"names":["ohlc","token","axios","post","query","variables","App","chartContainerRef","useRef","chart","resizeObserver","series","_useState","useState","_useState2","Object","slicedToArray","tokenAddress","setTokenAddress","useEffect","current","createChart","width","clientWidth","height","clientHeight","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","crosshair","mode","CrosshairMode","Normal","priceScale","borderColor","timeScale","console","log","addCandlestickSeries","upColor","borderVisible","priceFormat","precision","minMove","ResizeObserver","entries","_entries$0$contentRec","contentRect","applyOptions","setTimeout","fitContent","observe","disconnect","then","response","_response$data","_response$data$data","_response$data$data$e","data","ethereum","dexTrades","candles","map","candle","_candle$timeInterval","time","timeInterval","day","open","Number","high","low","close","setData","scrollToRealTime","react_default","a","createElement","className","value","placeholder","onChange","e","target","ref","rootElement","document","getElementById","ReactDOM","render"],"mappings":"8NAwBaA,EAAO,SAACC,GAAD,OAAWC,IAAMC,KAAK,+BAAgC,CACtEC,MAvBO,qiBAwBPC,UAAW,CAAEJ,kBClBjB,SAASK,IACP,IAAMC,EAAoBC,mBACpBC,EAAQD,mBACRE,EAAiBF,mBACjBG,EAASH,mBACfI,EAAwCC,mBAAS,8CAAjDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOK,EAAPH,EAAA,GAAqBI,EAArBJ,EAAA,GAoFA,OAlFAK,oBAAU,WACRV,EAAMW,QAAUC,YAAYd,EAAkBa,QAAS,CACrDE,MAAOf,EAAkBa,QAAQG,YACjCC,OAAQjB,EAAkBa,QAAQK,aAClCC,OAAQ,CACNC,gBAAiB,UACjBC,UAAW,4BAEbC,KAAM,CACJC,UAAW,CACTC,MAAO,WAETC,UAAW,CACTD,MAAO,YAGXE,UAAW,CACTC,KAAMC,IAAcC,QAEtBC,WAAY,CACVC,YAAa,WAEfC,UAAW,CACTD,YAAa,aAIjBE,QAAQC,IAAIhC,EAAMW,SAElBT,EAAOS,QAAUX,EAAMW,QAAQsB,qBAAqB,CAClDC,QAAS,yBACTC,eAAe,EACfC,YAAa,CACXC,UAAW,EACXC,QAAS,SAMZ,IAGH5B,oBAAU,WAWR,OAVAT,EAAeU,QAAU,IAAI4B,eAAe,SAAAC,GAC1C,IAAAC,EAA0BD,EAAQ,GAAGE,YAA7B7B,EAAR4B,EAAQ5B,MAAOE,EAAf0B,EAAe1B,OACff,EAAMW,QAAQgC,aAAa,CAAE9B,QAAOE,WACpC6B,WAAW,WACT5C,EAAMW,QAAQmB,YAAYe,cACzB,KAGL5C,EAAeU,QAAQmC,QAAQhD,EAAkBa,SAE1C,kBAAMV,EAAeU,QAAQoC,eACnC,IAEHrC,oBAAU,WACRqB,QAAQC,IAAI,0BAA2BxB,GACvCjB,EAAKiB,GAAcwC,KAAK,SAAUC,GAAU,IAAAC,EAAAC,EAAAC,EAG1C,GAFArB,QAAQC,IAAI,YAAaiB,GAEzB,OAAIA,QAAJ,IAAIA,OAAJ,UAAAC,EAAID,EAAUI,YAAd,IAAAH,OAAA,UAAAC,EAAID,EAAgBG,YAApB,IAAAF,OAAA,UAAAC,EAAID,EAAsBG,gBAA1B,IAAAF,OAAA,EAAIA,EAAgCG,UAAW,CAC7C,IAAMC,EAAUP,EAASI,KAAKA,KAAKC,SAASC,UAAUE,IAAI,SAAUC,GAAQ,IAAAC,EAC1E,MAAO,CACLC,KAAI,QAAAD,EAAED,EAAOG,oBAAT,IAAAF,OAAA,EAAEA,EAAqBG,IAC3BC,KAAMC,OAAON,EAAOK,MACpBE,KAAMD,OAAON,EAAOO,MACpBC,IAAKF,OAAON,EAAOQ,KACnBC,MAAOH,OAAON,EAAOS,UAIzBpC,QAAQC,IAAI,WAAYwB,GAExBtD,EAAOS,QAAQyD,QAAQZ,GAEvBxD,EAAMW,QAAQmB,YAAYuC,uBAG7B,CAAC7D,IAGF8D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAOE,MAAOlE,EACPmE,YAAY,uBACZC,SAAU,SAACC,GACTpE,EAAgBoE,EAAEC,OAAOJ,UAGlCJ,EAAAC,EAAAC,cAAA,OAAKO,IAAKjF,EAAmB2E,UAAU,qBAK7C,IAAMO,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAOd,EAAAC,EAAAC,cAAC3E,EAAD,MAASmF","file":"static/js/main.52e6e7bc.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst query = `\r\nquery ($token: String) {\r\n  ethereum(network: bsc) {\r\n    dexTrades(\r\n      options: {asc: \"timeInterval.day\"}\r\n      exchangeName: {is: \"Pancake\"}\r\n      baseCurrency: {is: $token}\r\n      quoteCurrency: {is: \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\"}\r\n      tradeAmountUsd: {gt: 10}\r\n    ) {\r\n      timeInterval {\r\n        day\r\n      }\r\n      high: quotePrice(calculate: maximum)\r\n      low: quotePrice(calculate: minimum)\r\n      open: minimum(of: block, get: quote_price)\r\n      close: maximum(of: block, get: quote_price)\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const ohlc = (token) => axios.post('https://graphql.bitquery.io/', {\r\n    query,\r\n    variables: { token }\r\n});","import React, { useEffect, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createChart, CrosshairMode } from 'lightweight-charts';\n\nimport { ohlc } from \"./bitquery\";\n\nimport './styles.css';\n\nfunction App() {\n  const chartContainerRef = useRef();\n  const chart = useRef();\n  const resizeObserver = useRef();\n  const series = useRef();\n  const [tokenAddress, setTokenAddress] = useState('0xbf5140a22578168fd562dccf235e5d43a02ce9b1');\n\n  useEffect(() => {\n    chart.current = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: chartContainerRef.current.clientHeight,\n      layout: {\n        backgroundColor: '#253248',\n        textColor: 'rgba(255, 255, 255, 0.9)',\n      },\n      grid: {\n        vertLines: {\n          color: '#334158',\n        },\n        horzLines: {\n          color: '#334158',\n        },\n      },\n      crosshair: {\n        mode: CrosshairMode.Normal,\n      },\n      priceScale: {\n        borderColor: '#485c7b',\n      },\n      timeScale: {\n        borderColor: '#485c7b',\n      },\n    });\n\n    console.log(chart.current);\n\n    series.current = chart.current.addCandlestickSeries({\n      upColor: 'rgba(120, 226, 160, 1)',\n      borderVisible: false,\n      priceFormat: {\n        precision: 6,\n        minMove: 0.000001\n      }\n    });\n\n    \n\n  }, []);\n\n  // Resize chart on container resizes.\n  useEffect(() => {\n    resizeObserver.current = new ResizeObserver(entries => {\n      const { width, height } = entries[0].contentRect;\n      chart.current.applyOptions({ width, height });\n      setTimeout(() => {\n        chart.current.timeScale().fitContent();\n      }, 0);\n    });\n\n    resizeObserver.current.observe(chartContainerRef.current);\n\n    return () => resizeObserver.current.disconnect();\n  }, []);\n\n  useEffect(() => {\n    console.log('current token address: ', tokenAddress);\n    ohlc(tokenAddress).then(function (response) {\n      console.log('Response:', response)\n\n      if (response?.data?.data?.ethereum?.dexTrades) {\n        const candles = response.data.data.ethereum.dexTrades.map(function (candle) {\n          return {\n            time: candle.timeInterval?.day,\n            open: Number(candle.open),\n            high: Number(candle.high),\n            low: Number(candle.low),\n            close: Number(candle.close)\n          }\n        })\n\n        console.log('Candles:', candles)\n\n        series.current.setData(candles)\n\n        chart.current.timeScale().scrollToRealTime();\n      }\n    });\n  }, [tokenAddress])\n\n  return (\n    <div className=\"App\">\n      <input value={tokenAddress}\n             placeholder=\"BEP20 Token Addresss\"\n             onChange={(e) => {\n               setTokenAddress(e.target.value);\n             }}\n      />\n      <div ref={chartContainerRef} className=\"chart-container\" />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}