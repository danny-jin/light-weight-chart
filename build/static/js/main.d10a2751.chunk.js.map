{"version":3,"sources":["bitquery.js","index.js"],"names":["ohlc","token","axios","post","query","variables","App","chartContainerRef","useRef","chart","resizeObserver","series","_useState","useState","_useState2","Object","slicedToArray","tokenAddress","setTokenAddress","useEffect","current","createChart","width","clientWidth","height","clientHeight","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","crosshair","mode","CrosshairMode","Normal","priceScale","borderColor","timeScale","rightOffset","barSpacing","fixLeftEdge","lockVisibleTimeRangeOnResize","rightBarStaysOnScroll","borderVisible","visible","timeVisible","secondsVisible","console","log","addCandlestickSeries","upColor","priceFormat","precision","minMove","ResizeObserver","entries","_entries$0$contentRec","contentRect","applyOptions","setTimeout","fitContent","observe","disconnect","then","response","_response$data","_response$data$data","_response$data$data$e","data","ethereum","dexTrades","candles","map","candle","time","timeInterval","day","open","Number","high","low","close","setData","scrollToRealTime","react_default","a","createElement","className","value","placeholder","onChange","e","target","ref","rootElement","document","getElementById","ReactDOM","render"],"mappings":"8NA2CaA,EAAO,SAACC,GAAD,OAAWC,IAAMC,KAAK,+BAAgC,CACtEC,MAtBO,ggBAuBPC,UAAW,CAAEJ,kBCrCjB,SAASK,IACP,IAAMC,EAAoBC,mBACpBC,EAAQD,mBACRE,EAAiBF,mBACjBG,EAASH,mBACfI,EAAwCC,mBAAS,8CAAjDC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOK,EAAPH,EAAA,GAAqBI,EAArBJ,EAAA,GA4FA,OA1FAK,oBAAU,WACRV,EAAMW,QAAUC,YAAYd,EAAkBa,QAAS,CACrDE,MAAOf,EAAkBa,QAAQG,YACjCC,OAAQjB,EAAkBa,QAAQK,aAClCC,OAAQ,CACNC,gBAAiB,UACjBC,UAAW,4BAEbC,KAAM,CACJC,UAAW,CACTC,MAAO,WAETC,UAAW,CACTD,MAAO,YAGXE,UAAW,CACTC,KAAMC,IAAcC,QAEtBC,WAAY,CACVC,YAAa,WAEfC,UAAW,CACTC,YAAa,GACbC,WAAY,EACZC,aAAa,EACbC,8BAA8B,EAC9BC,uBAAuB,EACvBC,eAAe,EACfP,YAAa,UACbQ,SAAS,EACTC,aAAa,EACbC,gBAAgB,KAIpBC,QAAQC,IAAIzC,EAAMW,SAElBT,EAAOS,QAAUX,EAAMW,QAAQ+B,qBAAqB,CAClDC,QAAS,yBACTP,eAAe,EACfQ,YAAa,CACXC,UAAW,EACXC,QAAS,SAMZ,IAGHpC,oBAAU,WAWR,OAVAT,EAAeU,QAAU,IAAIoC,eAAe,SAAAC,GAC1C,IAAAC,EAA0BD,EAAQ,GAAGE,YAA7BrC,EAARoC,EAAQpC,MAAOE,EAAfkC,EAAelC,OACff,EAAMW,QAAQwC,aAAa,CAAEtC,QAAOE,WACpCqC,WAAW,WACTpD,EAAMW,QAAQmB,YAAYuB,cACzB,KAGLpD,EAAeU,QAAQ2C,QAAQxD,EAAkBa,SAE1C,kBAAMV,EAAeU,QAAQ4C,eACnC,IAEH7C,oBAAU,WACRnB,EAAKiB,GAAcgD,KAAK,SAAUC,GAAU,IAAAC,EAAAC,EAAAC,EAG1C,GAFApB,QAAQC,IAAI,YAAagB,GAEzB,OAAIA,QAAJ,IAAIA,OAAJ,UAAAC,EAAID,EAAUI,YAAd,IAAAH,OAAA,UAAAC,EAAID,EAAgBG,YAApB,IAAAF,OAAA,UAAAC,EAAID,EAAsBG,gBAA1B,IAAAF,OAAA,EAAIA,EAAgCG,UAAW,CAC7C,IAAMC,EAAUP,EAASI,KAAKA,KAAKC,SAASC,UAAUE,IAAI,SAAUC,GAClE,MAAO,CACLC,KAAMD,EAAOE,aAAaC,IAC1BC,KAAMC,OAAOL,EAAOI,MACpBE,KAAMD,OAAOL,EAAOM,MACpBC,IAAKF,OAAOL,EAAOO,KACnBC,MAAOH,OAAOL,EAAOQ,UAIzBlC,QAAQC,IAAI,WAAYuB,GAExB9D,EAAOS,QAAQgE,QAAQX,GAEvBhE,EAAMW,QAAQmB,YAAY8C,uBAG7B,CAACpE,IAGFqE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAOE,MAAOzE,EACP0E,YAAY,uBACZC,SAAU,SAACC,GACT3E,EAAgB2E,EAAEC,OAAOJ,UAGlCJ,EAAAC,EAAAC,cAAA,OAAKO,IAAKxF,EAAmBkF,UAAU,qBAK7C,IAAMO,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAOd,EAAAC,EAAAC,cAAClF,EAAD,MAAS0F","file":"static/js/main.d10a2751.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// const query = `\r\n// query ($token: String) {\r\n//   ethereum(network: bsc) {\r\n//     dexTrades(\r\n//       options: {limit: 100000, asc: \"timeInterval.minute\"}\r\n//       baseCurrency: {is: $token}\r\n//       quoteCurrency: {is: \"0xe9e7cea3dedca5984780bafc599bd69add087d56\"}\r\n//     ) {\r\n//       timeInterval {\r\n//         minute(count: 15)\r\n//       }\r\n//       high: quotePrice(calculate: maximum)\r\n//       low: quotePrice(calculate: minimum)\r\n//       open: minimum(of: block, get: quote_price)\r\n//       close: maximum(of: block, get: quote_price)\r\n//     }\r\n//   }\r\n// }\r\n// `;\r\n\r\nconst query = `\r\nquery ($token: String) {\r\n  ethereum(network: bsc) {\r\n    dexTrades(\r\n      options: {asc: \"timeInterval.day\"}\r\n      baseCurrency: {is: $token}\r\n      quoteCurrency: {is: \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\"}\r\n      tradeAmountUsd: {gt: 10}\r\n    ) {\r\n      timeInterval {\r\n        day\r\n      }\r\n      high: quotePrice(calculate: maximum)\r\n      low: quotePrice(calculate: minimum)\r\n      open: minimum(of: block, get: quote_price)\r\n      close: maximum(of: block, get: quote_price)\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const ohlc = (token) => axios.post('https://graphql.bitquery.io/', {\r\n    query,\r\n    variables: { token }\r\n});","import React, { useEffect, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createChart, CrosshairMode } from 'lightweight-charts';\n\nimport { ohlc } from \"./bitquery\";\n\nimport './styles.css';\n\nfunction App() {\n  const chartContainerRef = useRef();\n  const chart = useRef();\n  const resizeObserver = useRef();\n  const series = useRef();\n  const [tokenAddress, setTokenAddress] = useState('0x86dd49963fe91f0e5bc95d171ff27ea996c0890c');\n\n  useEffect(() => {\n    chart.current = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: chartContainerRef.current.clientHeight,\n      layout: {\n        backgroundColor: '#253248',\n        textColor: 'rgba(255, 255, 255, 0.9)',\n      },\n      grid: {\n        vertLines: {\n          color: '#334158',\n        },\n        horzLines: {\n          color: '#334158',\n        },\n      },\n      crosshair: {\n        mode: CrosshairMode.Normal,\n      },\n      priceScale: {\n        borderColor: '#485c7b',\n      },\n      timeScale: {\n        rightOffset: 12,\n        barSpacing: 3,\n        fixLeftEdge: true,\n        lockVisibleTimeRangeOnResize: false,\n        rightBarStaysOnScroll: true,\n        borderVisible: false,\n        borderColor: '#fff000',\n        visible: true,\n        timeVisible: true,\n        secondsVisible: false,\n      },\n    });\n\n    console.log(chart.current);\n\n    series.current = chart.current.addCandlestickSeries({\n      upColor: 'rgba(120, 226, 160, 1)',\n      borderVisible: false,\n      priceFormat: {\n        precision: 6,\n        minMove: 0.000001\n      }\n    });\n\n    \n\n  }, []);\n\n  // Resize chart on container resizes.\n  useEffect(() => {\n    resizeObserver.current = new ResizeObserver(entries => {\n      const { width, height } = entries[0].contentRect;\n      chart.current.applyOptions({ width, height });\n      setTimeout(() => {\n        chart.current.timeScale().fitContent();\n      }, 0);\n    });\n\n    resizeObserver.current.observe(chartContainerRef.current);\n\n    return () => resizeObserver.current.disconnect();\n  }, []);\n\n  useEffect(() => {\n    ohlc(tokenAddress).then(function (response) {\n      console.log('Response:', response)\n\n      if (response?.data?.data?.ethereum?.dexTrades) {\n        const candles = response.data.data.ethereum.dexTrades.map(function (candle) {\n          return {\n            time: candle.timeInterval.day,\n            open: Number(candle.open),\n            high: Number(candle.high),\n            low: Number(candle.low),\n            close: Number(candle.close)\n          }\n        })\n\n        console.log('Candles:', candles)\n\n        series.current.setData(candles)\n\n        chart.current.timeScale().scrollToRealTime();\n      }\n    });\n  }, [tokenAddress])\n\n  return (\n    <div className=\"App\">\n      <input value={tokenAddress}\n             placeholder=\"BEP20 Token Addresss\"\n             onChange={(e) => {\n               setTokenAddress(e.target.value);\n             }}\n      />\n      <div ref={chartContainerRef} className=\"chart-container\" />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}